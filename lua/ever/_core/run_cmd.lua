---@class ever.RunCmdOpts

local M = {}

--- Runs a command and returns the output.
---@param cmd string[] -- Command to run
---@param opts? ever.RunCmdOpts -- options, such as special error handling
---@return string[] -- command output
M.run_cmd = function(cmd, opts)
    local output = vim.system(cmd, { text = true }):wait()
    if output.stdout and output.stdout ~= "" then
        return vim.split(output.stdout, "\n")
    else
        return vim.split(output.stderr, "\n")
    end
end

--- Runs a command that doesn't display output.
--- This is used in cases where the UI handles visual updates.
--- This function prints an error message if one is generated by the command.
---@param cmd string -- Command to run
---@param opts? ever.RunCmdOpts -- options, such as special error handling
---@return "success" | "error"
M.run_hidden_cmd = function(cmd, opts)
    local output = vim.fn.system(cmd)
    if vim.v.shell_error ~= 0 then
        vim.notify(output.stderr, vim.log.levels.ERROR)
        return "error"
    end
    return "success"
end

return M
